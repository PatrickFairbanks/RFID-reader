//These are the functions that will be used for the Transceiver
//It includes the Configuration needed on start up to get ready to Transmit a signal,
//As well as a function that switches the configuration to a Majority Voting Receive Mode.
//There are two Functions that will set the RTM input on the transceiver high or low, for transmit / receive.
//One function used to store every third bit of data from the DSYNC / DOUT pins from the transceiver
//^This is how to store the Received and filtered data

//Include Headers

#include <GPIO.h>   //eleven engineering SXC Library on bitbucket


// These are what the data sheet says the addresses are for the configuration
// registers in the MLX90121. Who knows really

#define AnlgCnfg 0x0
#define PwrState 0x1
#define DgtlCnfg 0x3
#define EncSym0 0x4
#define EncSym1 0x5
#define EncSym2 0x6
#define EncSym3 0x7
#define EncSym4 0x8
#define EncSym5 0x9
#define EncTimeRef 0xA
#define DecTimeRef 0xB
#define LTC 0xC

//These Define the data transmit to set receive bit and mode bit high.
//Just in case, pretty sure this is just dumb and we don't need it.

#define RECEIVE 0x001
#define TRANSMIT 0x000
#define PACKAGESIZE 12

//EDIT THIS TO THE PIN NUMBERS THAT MODE AND RTB ARE CONNECTED TO

int modePinNumber = 10;
int rtbPinNumber = 11;



//Instanciate?


//EDIT THE ABOVE NUMBERS

//There may be some garbage in the XiNC2 C library about creating GPIO pins or something
//IDK what's going on there.

//These Functions set the bits of the RTB input and Mode input of the Transceiver
//THEY MUST BE USED BEFORE CONFIGURING, TRANSMITTING, OR RECEIVING

void configMode()
{
	SetPin(modePinNumber, false);
	SetPin(rtbPinNumber, false);
}

void receiveMode()
{
	SetPin(modePinNumber, true);
	SetPin(rtbPinNumber, true);
}

void transmitMode()
{
	SetPin(modePinNumber, true);
	SetPin(rtbPinNumber, false);
}

//Any other pins that need to be written high or low can be done in this format.

//This is the function for Transmit Configuration Mode. It is a 12 bit code.
//The first 4 bits will indicate the address of the register being modified
//The next 8 bits will be the modification.
// 0's are written in the unused bits


int writeStartConfig()
{
	// This function sets which pins are input and which pins are output. 
	
	ConfigurePin(pin#, Input);
	ConfigurePin(pin#, Output);
	ConfigurePin(pin#, Input);
	ConfigurePin(pin#, Output);
	ConfigurePin(pin#, Input);
	ConfigurePin(pin#, Output);
	ConfigurePin(pin#, Input);
	
	configMode();
	// here, the only option we need to change is the amplitude modulation. This can be changed to 10% or 90%. Why? who knows.
	// but what we do know is that we have to change it maybe. So instead of doing this, I'm not going to. What we do need to change
	// is the receive format. This is going to be in a majority voting standard, which is NOT the default.
	// At the moment I forget which register address to change, and what to change it too. Woohoo
	
}

//This is the function to be used when receiving the signal from the transceiver. It will need to process the majority voted data.
//To do this, we take the first bit from the DSYNC output for every three bits of DOUT output.

int receivedData[PACKAGESIZE](){
	
	
	
}


int main(){
	
	writeStartConfig();
	transmitMode();
	
	while(1){
		
		//Here, since the Transmit Mode is on, we need to start to receive data.
		//However, there are some timing issues with turning on the transmission and receiving the signals
		// and therefore, a delay is needed. This will probably implemented before the While Loop.
		
		//There must be a way to know whether there is a device working. If there is, switch to a receive mode, because then we can 
		//process the data. This would be good. Transmit mode transmits the signal to the transponder that will let it know that we 
		//would like to receive it's data. In theory, we can then shift into receive mode, and be ready to receive the data.
		
		
	}
	
	return(0);
}
